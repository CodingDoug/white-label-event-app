apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'io.fabric'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion 26
    buildToolsVersion '26.0.1'

    defaultConfig {
        minSdkVersion 15
        targetSdkVersion 25
    }

    signingConfigs {
        release  // defined conditionally below
    }

    buildTypes {
        debug {
            buildConfigField 'boolean', 'ALLOW_FAKE_TIME', 'true'
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release

            buildConfigField 'boolean', 'ALLOW_FAKE_TIME', isAllowFakeTime()
        }
    }

    productFlavors {
        stubbed {
            applicationId 'com.hyperaware.conference.stubbed'
            versionCode 1
            versionName '0.1'
        }
        // If you are forking this app, add your own product flavor here
    }
}

dependencies {
    compile project(':model')

    // Standard Android support libraries

    compile "com.android.support:appcompat-v7:${android_support_version}"
    compile "com.android.support:design:${android_support_version}"
    compile "com.android.support:cardview-v7:${android_support_version}"
    compile "com.android.support:recyclerview-v7:${android_support_version}"

    // Firebase / Play Services

    compile "com.google.firebase:firebase-core:${play_services_version}"
    compile "com.google.firebase:firebase-database:${play_services_version}"
    compile "com.google.firebase:firebase-auth:${play_services_version}"
    compile "com.google.android.gms:play-services-auth:${play_services_version}"
    compile "com.google.firebase:firebase-crash:${play_services_version}"
    compile "com.google.firebase:firebase-perf:${play_services_version}"

    // UI utilities

    // Glide is used for downloading and populating images
    compile 'com.github.bumptech.glide:glide:3.7.0'
    // PhotoView is used to facilitate panning/zooming of larger map images
    compile 'com.github.chrisbanes.photoview:library:1.2.4'

    // Core utilities

    compile 'de.halfbit:tinybus:3.0.2'
    compile 'com.google.dagger:dagger:2.11'
    apt 'com.google.dagger:dagger-compiler:2.11'
    provided 'javax.annotation:jsr250-api:1.0'
    compile 'commons-io:commons-io:2.5'

    compile 'com.twitter.sdk.android:twitter:2.2.0'

    testCompile 'junit:junit:4.12'
    testCompile 'joda-time:joda-time:2.9.6'
}

// If you define EVENT_APP_KEYSTORE, we'll assume you defined everything below.
// You can define these in your ~/.gradle/gradle.properties to keep them private
if (project.hasProperty('EVENT_APP_KEYSTORE')) {
    android.signingConfigs.release.storeFile = file(EVENT_APP_KEYSTORE.toString())
    android.signingConfigs.release.storePassword = EVENT_APP_KEYSTORE_PWD
    android.signingConfigs.release.keyAlias = EVENT_APP_KEY_ALIAS
    android.signingConfigs.release.keyPassword = EVENT_APP_KEY_PWD
}
else {
    android.buildTypes.release.signingConfig = null
}

// Inject twitter config resources per-flavor
// If a file called twitter_[flavor].properties exists, it will be consulted
// for values to use for api key and secret, otherwise empty strings for
// anything missing.
//
afterEvaluate {
    android.productFlavors.all { flavor ->
        // Inject twitter api values
        File twitter_props_file = new File(projectDir, "twitter_${flavor.name}.properties")
        Properties twitter_props = new Properties()
        if (twitter_props_file.canRead()) {
            FileInputStream fis = new FileInputStream(twitter_props_file)
            twitter_props.load(fis)
            fis.close()
        }
        flavor.resValue 'string', 'twitter_api_key', twitter_props.getProperty('twitterApiKey', '')
        flavor.resValue 'string', 'twitter_api_secret', twitter_props.getProperty('twitterApiSecret', '')
    }
}


def isAllowFakeTime() {
    def value = project.getProperties().get('allowFakeTime')
    return value != null ? value : 'false'
}

apply plugin: 'com.google.gms.google-services'
